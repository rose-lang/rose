use { linearize, transpose } from "./ad.js"
use { + } from "./num.js"

val T => init : u32 -> []T

pub val T => len : []T -> u32

pub val T => set : []T -> u32 -> T -> ()

def do_for_range (f : u32 -> ()) (a : u32) (b : u32) : () =
  if a < b then
    let _ = f a
    in return do_for_range f (a + 1) b
  else ()

def do_for ((n, f) : (u32, u32 -> ())) : () = do_for_range f 0 n

def linearize do_for = do_for

pub def T => new (n : u32) (f : u32 -> T) : []T =
  let xs = init n
  let _ = do_for (n, \i => set xs i (f i))
  in xs

def transpose do_for ((n, f) : (u32, u32 -> ())) : ((), () -> ()) =
  let g : u32 -> ((), () -> ()) = transpose f
  let hs : [](() -> ()) = new n (\i => let (_, h) = g i in h)
  in ((), \() => do_for (n, \i => hs i ()))

pub def A B => map (f : A -> B) (xs : []A) : []B = new (len xs) (\i => f (xs i))
